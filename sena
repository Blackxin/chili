#!/usr/bin/env bash

sh_sena()
{
	>| jogos.txt
	>| jogosformatado.txt

	declare -i qtdjogos=$1
#	qtddezenas=$2
#	declare -i metadeqtddezenas=$(echo "$qtddezenas"/2 | bc)
	declare -i qtddezenas=6
	declare -i metadeqtddezenas=$(( qtddezenas / 2 ))
	declare -i dezezenasasereremexcluidas=$(shuf -i 1-$qtddezenas -n 1)
	declare -i n=1

	while (( n <= qtdjogos ))
	do
		[[ $n -lt 10 ]] && var="Jogo "0"$n: " || var="Jogo $n: "
	  	jogos1a30=$(shuf  -i  1-30 -n $metadeqtddezenas | tr -d ',e' | tr -s ' ' | sed 's/ / \n/g' | sort -n | while read a; do printf '%02d ' $a ; done)
	  	jogos31a60=$(shuf -i 31-60 -n $metadeqtddezenas | tr -d ',e' | tr -s ' ' | sed 's/ / \n/g' | sort -n | while read a; do printf '%02d ' $a ; done)
	  	#echo $jogos1a30 $jogos31a60 # 09 11 14 35 37 50
	   line="$jogos1a30$jogos31a60"

		if grep -o "$line" resultadosena.txt; then  # jogo existe no BD? descarta!
			printf 'Jogo (%04d) Dezenas : %s -> foi descartado\n' "$n" "$line"
			continue
		fi

		if grep -o "$line" jogos.txt; then  # jogo existe? descarta!
			printf 'Jogo (%04d) Dezenas : %s -> foi descartado\n' "$n" "$line"
			continue
		fi

		((n++))
		printf 'Jogo (%04d) Dezenas : %s -> foi aceito\n' "$n" "$line"
		echo $line >> jogos.txt
		echo "$var $line" >> jogosformatado.txt
	done
	#done >> jogosformatado.txt
	#awk '{$1="";$2=""; print $0}' jogosformatado.txt | sed 's/^ \+//' > jogos.txt
	#sort jogosformatado.txt > temp.txt; cp temp.txt jogosformatado.txt
	sort jogos.txt          > temp.txt;	cp temp.txt jogos.txt
	[[ -e temp.txt ]] && rm temp.txt
	#cat jogos.txt
	#chown www-data jogos.txt
	#chgrp www-data jogos.txt
}

sh_compare()
{
	dezenas=$(cat jogos.txt)

	info "${dezenas[@]}"

	for i in "${dezenas[@]}"
	do
		printf "$i - OK não encontrado no BD\n"
		if grep -o "$i" resultadosena.txt; then
			printf "Já tem\n"
		fi
	done
}

sh_resultadosena()
{
	clear
	fileresult='resultadosena.txt'
	[[ ! -e $fileresult ]] && >| $fileresult

	#### REMOVENDO ARQUIVOS TEMPORARIOS
	rm /tmp/UltSort.txt 2> /dev/null
	rm /tmp/UltSortAtualiza.txt 2> /dev/null

	#### COLETANDO DADOS DO ULTIMO RESULTADO DA MEGASENA PULICADO PELA API DA CAIXA
	wget https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/ --no-check-certificate -qO- > /tmp/UltSort.txt
	numUltSort=$(cat /tmp/UltSort.txt | grep  '"numero":' | awk '{print $2}' | sed 's/\,//g' | sed '/^$/d' | sed -e "s/\r//g")
	#### COLETANDO O NUMERO DO ULTIMO SORTEIO GRAVADO NO BD
	numUltSortGrav=$(cat $fileresult | tail -1 | awk -F"-" '{print $1}')
	#### COLETANDO DADOS DOS DOS RESULTADOS NAO INCLUÍDOS NO BD
	echo $numUltSort
	echo $numUltSortGrav

	if [[ $numUltSort -eq $numUltSortGrav ]] ; then
		echo "BD já atualizado!"
		echo "Nenhum registro novo encontrado."
		sleep 2
		exit 1
	else
		echo "Registro novo encontrado!"
		echo "Atualizando Banco de Dados. Aguarde."
		sleep 2
		for (( contLinha=$numUltSortGrav+1; contLinha<=$numUltSort; contLinha++ ))
		do
			wget https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/$contLinha --no-check-certificate -qO- > /tmp/UltSortAtualiza.txt
			listaDezenas=$(cat /tmp/UltSortAtualiza.txt | sed -n '/listaDezenas/,/],/p' | sed 's/[^0-9]//g' | sed -e "s/\r//g" | awk -F"-" '{print $1}')
			listaDezenas=$(echo $listaDezenas  | cut -c1-18)
			dataApuracao=$(cat /tmp/UltSortAtualiza.txt | grep  '"dataApuracao":' | awk '{print $2}' | sed 's/\"//g' | sed 's/\,//g' | sed -e "s/\r//g" )
			valorEstimadoProximoConcurso=$(cat /tmp/UltSortAtualiza.txt | grep  '"valorEstimadoProximoConcurso":' | awk -F"-" '{print $2}' | sed 's/\,//g')
			dadosSena=$(cat /tmp/UltSortAtualiza.txt | sed -n '/"faixa": 1/,/},/p')
			dadosQuina=$(cat /tmp/UltSortAtualiza.txt | sed -n '/"faixa": 2/,/},/p')
			dadosQuadra=$(cat /tmp/UltSortAtualiza.txt | sed -n '/"faixa": 3/,/},/p')
			numGanhadoresSena=$(echo $dadosSena | awk -F'"' '{ print $5 }' | sed 's/://g' | sed 's/,//g')
			valorPremioSena=$(echo $dadosSena | awk -F'"' '{print $7}' | sed 's/://g' | sed 's/,//g')
			valorPremioSena=$(awk '{printf "%.2f\n" ,$1}' <<< "$valorPremioSena")
			valorPremioSenaFormat=$(echo $valorPremioSena  | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta' | tr ',.' '.,')
	    	varLinhaInteira=$(echo $contLinha - $dataApuracao - $listaDezenas - $valorPremioSenaFormat - $numGanhadoresSena)
	    	echo $varLinhaInteira |& tee -a $fileresult
		done
		echo "Banco de Dados atualizado!"
	fi
}

sh_usage()
{
	cat <<EOF
usage:
   sena -h | --help           # este help
   sena 3                     # jogar 3 jogos
   sena 10                    # jogar 10 jogos
   sena 100                   # jogar 100 jogos
   sena -c | --compare        # comparar jogos
   sena -u | -U | --update    # atualizar BD
EOF
}

if [[ -z $1 || $1 = @(-h|--help) || $1 = "-h" || $1 = "--help" || $1 = "help" || $1 = "-help" ]]; then
   sh_usage
   exit $(( $# ? 0 : 1 ))
elif [[ $1 = @(-c|--compare) ]]; then
   sh_compare
   exit $(( $# ? 0 : 1 ))
elif [[ $1 = @(-U|-u|--update) ]]; then
   sh_resultadosena
   exit $(( $# ? 0 : 1 ))
elif test $# -ge 1; then
	sh_sena $@
fi
