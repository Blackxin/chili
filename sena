#!/usr/bin/env bash
#  sena - aplicativo para gerar numeros aleatorios da sena
#
#  Created: 2022/02/15
#  Altered: 2022/07/04
#
#  Copyright (c) 2022-2022, Benedito Ramos <diramos@uol.com.br>
#  Copyright (c) 2022-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#  sena uses quite a few external programs during its execution. You
#  need to have at least the following installed for makepkg to function:
#     awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
#     gettext, gpg, grep, gzip, sed, tput (ncurses), xz, etc
#########################################################################
#global
cpath=/tmp
filejogos="$cpath/jogos.txt"
filejogosformatado="$cpath/jogosformatado.txt"
fileresult="$cpath/resultadosena.txt"
reset="\e[0m";
red="\e[1;31m";
green="\e[1;32m";
red="\e[1;31m";

sh_playsena()
{
	>| $filejogos
	>| $filejogosformatado
	[[ ! -e $fileresult ]] && >| $fileresult

	bytes=$(stat -c %s $fileresult); [[ $bytes -eq 0 ]] && die "erro: necessario atualizar o BD. Use sena --update"
	sh_resultadosena
   [[ $# -eq 2 ]] && declare -i qtddezenas=$2 || declare -i qtddezenas=6
 	[[ qtddezenas -gt 15 ]] && die "erro: máximo de dezenas jogadas é: 15"
 	[[ qtddezenas -lt  6 ]] && die "erro: minímo de dezenas jogadas é: 6"
 	[[ qtddezenas -gt 15 ]] && qtddezenas=15
 	[[ qtddezenas -lt  6 ]] && qtddezenas=6

	declare -i qtdjogos=$1
	declare -i resto=$(( qtddezenas % 2 ))
	declare -i metadeqtddezenas=$(( qtddezenas / 2 ))
	declare -i outrametade=$metadeqtddezenas
	declare -i n=0

 	if [[ resto -gt 0 ]] ; then
		((metadeqtddezenas++))
	fi

	while [[ n -lt qtdjogos ]]; do
		[[ $n -lt 10 ]] && var="Jogo "0"$n: " || var="Jogo $n: "
	  	jogos1a30=$(shuf  -i  1-30 -n $metadeqtddezenas | tr -d ',e' | tr -s ' ' | sed 's/ / \n/g' | sort -n | while read a; do printf '%02d ' $a ; done)
	  	jogos31a60=$(shuf -i 31-60 -n $outrametade      | tr -d ',e' | tr -s ' ' | sed 's/ / \n/g' | sort -n | while read a; do printf '%02d ' $a ; done)
	  	#echo $jogos1a30 $jogos31a60 # 09 11 14 35 37 50
	   line="$jogos1a30$jogos31a60"

  	 	if [[ qtddezenas -le 6 ]] ; then
			if grep -q -o "$line" $fileresult; then  # jogo existe no BD? descarta!
				printf 'Jogo (%04d) Dezenas (%02d): %s -> foi descartado\n' "$n" $qtddezenas "$line"
				continue
			fi
		fi

		if grep -q -o "$line" $filejogos; then  # jogo existe? descarta!
			printf 'Jogo (%04d) Dezenas (%02d): %s -> foi descartado\n' "$n" $qtddezenas "$line"
			continue
		fi

		((n++))
		printf 'Jogo (%04d) Dezenas (%02d): %s -> foi aceito\n' "$n" $qtddezenas "$line"
		echo $line >> $filejogos
		echo "$var $line" >> $filejogosformatado
	done
	filetmp=$(mktemp)
	sort $filejogos > $filetmp; cp $filetmp $filejogos
	#chown www-data $filejogos
	#chgrp www-data $filejogos
}

die()
{
   local msg=$1; shift
   printf "${red}$msg\n" >&2
   exit 1
}

msg()
{
   local msg=$1; shift
   printf "${green}$msg${reset}\n" >&2
   return
}

sh_compare()
{
	while read -r i; do
		if grep -q -o "$i" $fileresult; then
			echo "$i - FAIL Já tem no BD"
		else
			echo "$i - OK não encontrado no BD"
		fi
	done < $filejogos
}

sh_resultadosena()
{
	[[ ! -e $fileresult ]] && >| $fileresult

	#### REMOVENDO ARQUIVOS TEMPORARIOS
	rm /tmp/UltSort.txt 2> /dev/null
	rm /tmp/UltSortAtualiza.txt 2> /dev/null

	#### COLETANDO DADOS DO ULTIMO RESULTADO DA MEGASENA PULICADO PELA API DA CAIXA
	wget https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/ --no-check-certificate -qO- > /tmp/UltSort.txt
	numUltSort=$(cat /tmp/UltSort.txt | grep  '"numero":' | awk '{print $2}' | sed 's/\,//g' | sed '/^$/d' | sed -e "s/\r//g")
	#### COLETANDO O NUMERO DO ULTIMO SORTEIO GRAVADO NO BD
	numUltSortGrav=$(cat $fileresult | tail -1 | awk -F"-" '{print $1}')
	#### COLETANDO DADOS DOS DOS RESULTADOS NAO INCLUÍDOS NO BD
	echo "Sorteios      : $numUltSort"
	echo "Ultimo Sorteio: $numUltSortGrav"

	if [[ $numUltSort -eq $numUltSortGrav ]] ; then
		msg "BD já atualizado!"
		msg "Nenhum registro novo encontrado."
	else
		msg "Registro novo encontrado!"
		msg "Atualizando Banco de Dados. Aguarde."
		sleep 2
		for (( contLinha=$numUltSortGrav+1; contLinha<=$numUltSort; contLinha++ ))
		do
			wget https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/$contLinha --no-check-certificate -qO- > /tmp/UltSortAtualiza.txt
			listaDezenas=$(cat /tmp/UltSortAtualiza.txt | sed -n '/listaDezenas/,/],/p' | sed 's/[^0-9]//g' | sed -e "s/\r//g" | awk -F"-" '{print $1}')
			listaDezenas=$(echo $listaDezenas  | cut -c1-18)
			dataApuracao=$(cat /tmp/UltSortAtualiza.txt | grep  '"dataApuracao":' | awk '{print $2}' | sed 's/\"//g' | sed 's/\,//g' | sed -e "s/\r//g" )
			valorEstimadoProximoConcurso=$(cat /tmp/UltSortAtualiza.txt | grep  '"valorEstimadoProximoConcurso":' | awk -F"-" '{print $2}' | sed 's/\,//g')
			dadosSena=$(cat /tmp/UltSortAtualiza.txt | sed -n '/"faixa": 1/,/},/p')
			dadosQuina=$(cat /tmp/UltSortAtualiza.txt | sed -n '/"faixa": 2/,/},/p')
			dadosQuadra=$(cat /tmp/UltSortAtualiza.txt | sed -n '/"faixa": 3/,/},/p')
			numGanhadoresSena=$(echo $dadosSena | awk -F'"' '{ print $5 }' | sed 's/://g' | sed 's/,//g')
			valorPremioSena=$(echo $dadosSena | awk -F'"' '{print $7}' | sed 's/://g' | sed 's/,//g')
			valorPremioSena=$(awk '{printf "%.2f\n" ,$1}' <<< "$valorPremioSena")
			valorPremioSenaFormat=$(echo $valorPremioSena  | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta' | tr ',.' '.,')
	    	varLinhaInteira=$(echo $contLinha - $dataApuracao - $listaDezenas - $valorPremioSenaFormat - $numGanhadoresSena)
	    	echo $varLinhaInteira |& tee -a $fileresult
		done
		echo "Banco de Dados atualizado!"
	fi
}

sh_usage()
{
	cat <<EOF
usage:
   sena -h | --help           # este help
   sena 3                     # jogar 3 jogos
   sena 10                    # jogar 10 jogos
   sena 10 6                  # jogar 10 jogos com 6 dezenas
   sena 5 15                  # jogar 5 jogos com 15 dezenas
   sena -c | --compare        # comparar jogos
   sena -U | --update         # atualizar BD
EOF
}

if [[ -z $1 || $1 = @(-h|--help) ]]; then
   sh_usage
   exit $(( $# ? 0 : 1 ))
elif [[ $1 = @(-c|--compare) ]]; then
   sh_compare
   exit $(( $# ? 0 : 1 ))
elif [[ $1 = @(-U|--update) ]]; then
   sh_resultadosena
   exit $(( $# ? 0 : 1 ))
elif test $# -ge 1; then
	sh_playsena $@
fi
